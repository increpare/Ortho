#!/usr/bin/env node
var execSync = require('child_process').execSync

var fs = require('fs')
var glob = require('./js/app/orthoGlobals')
var lib = require('./js/orthoLib')
var svgRender = require("./js/svgRender")
var log = console.log
var Canvas = require('canvas')
var db = require('./res/docDatabase')
var css = require('css');
var Image = Canvas.Image
var Inliner = require('inliner');


var fast=false;
var inline=true;
for (var i=2;i<process.argv.length;i++){
	var t = process.argv[i];
	if (t==="-noinline"){
		inline=false;
	} else {
		log("Don't undesratnd argument '"+t+"'.")
		return;
	}
}

function findCssVar(cssDat,varName){
	for (var i=0;i<cssDat.stylesheet.rules.length;i++){
		var r = cssDat.stylesheet.rules[i];
		for (var j=0;j<r.declarations.length;j++){
			var d = r.declarations[j];
			if (d.type==='declaration' && d.property===varName){
				return d.value;
			}
		}
	}
	return null;
}

var cssPath = ("./docs/css/custom.css")
var cssFileStr=fs.readFileSync(cssPath,'utf8')
var cssDat = css.parse(cssFileStr,{},cssPath)
var fgCol = findCssVar(cssDat,"--fg")
var bgCol = findCssVar(cssDat,"--bg")
if (fgCol===null){
	fgCol="#000000"
}
if (bgCol===null){
	bgCol="#ffffff"
}
svgRender.setPadding(0.5)
svgRender.setColours(bgCol,fgCol,bgCol)

function saveHTML(filePath,htmlDat){
	fs.writeFileSync(filePath,htmlDat);
	if(inline===false){
		return;
	}
	new Inliner(filePath, function (error, htmlMinified) {
		fs.writeFileSync(filePath,htmlMinified);
	})
}
function symbolName(i){
	var s = db[i];
	s = s.name.split(' ').join('_')
	return s
}

glob.drawGridLines=false;

//1 generate simple images

glob.sketchBook = [{
	elements:[[8,4,0]],
	lines:[],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]


for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[0][2]=s;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/${symbolName(s)}.svg`;
	fs.writeFileSync(filePath, svgDat);
}

//1b generate triple images
glob.sketchBook = [{
	elements:[[7,4,35],[7,5,0],[7,6,36]],
	lines:[[7,6,7,4,0]],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]

for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[1][2]=s;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/triple_${symbolName(s)}.svg`
	fs.writeFileSync(filePath, svgDat);
}



for (var s=0;s<glob.symbolCount;s++){
		glob.sketchBook = [{
		elements:[[8,6,0],[7,5,35],[8,5,36],[9,5,37],[7,6,38],[9,6,39],[7,7,40],[8,7,41],[9,7,42]],
		lines:[[8,6,7,5,0],[8,6,8,5,0],[9,5,8,6,0],[7,6,8,6,0],[9,6,8,6,0],[7,7,8,6,0],[8,7,8,6,0],[9,7,8,6,0]],
		offsetX:0,
		offsetY:0,
		scale:1,
		sketchTitle:""
	}]
	glob.sketchBookIndex=0
	glob.page=glob.sketchBook[0]
	glob.page.elements[0][2]=s;


	//show/hide things as needed
	var dbs=db[s];
	var letters = ["A","B","C","D","E","F","G","H"];
	for (var i=letters.length-1;i>=0;i--){
		var L = letters[i]
		if (dbs.uses.indexOf(L)===-1){
			glob.page.elements.splice(i+1,1);
			glob.page.lines.splice(i,1);
		}
	}


	var svgDat = svgRender.render();
	var filePath = `./tmp/spider_${symbolName(s)}.svg`
	fs.writeFileSync(filePath, svgDat)
}

var genericHeader = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Orthona Documentation</title>
    <link href="css/custom.css" rel="stylesheet">
  </head>
  <body>`

var genericFooter = `</body>
</html>`

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

function embedSvg(name,width,height,className){
	var svgStr=fs.readFileSync(`./tmp/${name}.svg`,'utf8')
	var startIdx = svgStr.indexOf("viewBox=");
	svgStr = svgStr.substr(startIdx);
	classStr="";
	if (className!=null){
		classStr+=`class ="${className}"`
	}
	svgStr=`<svg ${classStr} width="${width}" height=${height} `+svgStr;
	svgStr = svgStr.replaceAll(`stroke-linecap="round"`,"") 
	svgStr = svgStr.replaceAll(`stroke-width='1'`,"") 
	svgStr = svgStr.replaceAll(`stroke='${fgCol}'`,"") 
	svgStr = svgStr.replaceAll(`fill='${bgCol}'`,"") 
	svgStr = svgStr.replaceAll(`font-family="Helvetica"`,"") 
	svgStr = svgStr.replaceAll(`font-size="12px"`,"")  
	svgStr = svgStr.replaceAll(`text-anchor="middle"`,"")  
	svgStr = svgStr.replaceAll(`<path   fill='transparent'  d=''/>`,"")  
	svgStr = svgStr.replaceAll(`version='1.1'`,"")  
	return svgStr;
}

var index = genericHeader;
index+='<h1>Orthona</h1>\n'
index+='<table >\n'

for (var i=0;i<7;i++){
	index+="<tr>\n"
	for (var j=0;j<5;j++){
		var s = j+5*i;
		index+="<td>\n"
		index+=`<a   href='${symbolName(s)}.html'>\n`
		index+=embedSvg(symbolName(s),"50px","50px")+"\n";
		index+="</a></td>\n"
	}
	index+="</tr>\n"
}

index+="</table>\n"
index+="<p>\n"
index+="[ <a href='cheatsheet.html'>cheatsheet</a> ]\n"
index+=genericFooter

saveHTML("./docs/index.html",index);


//cheatsheet


var index = genericHeader;
index+='<h1>Orthona Cheatsheet</h1>\n'
index+='<table class="cheat" >\n'

for (var i=0;i<7;i++){
	index+="<tr>\n"
	for (var j=0;j<5;j++){
		var s = j+5*i;
		index+="<td>\n"
		index+=`<a   href='${symbolName(s)}.html'>\n`
		index+=embedSvg(symbolName(s),"40px","40px")+"\n";
		index+=`<br>${db[s].name}</a>\n`
		index+="</td>\n"
	}
	index+="</tr>\n"
}

index+="</table>\n"
index+="<p>\n"
index+="[ <a href='index.html'>home</a> ]\n"
index+=genericFooter


saveHTML("./docs/cheatsheet.html",index);


//generate individual pages

for (var s=0;s<glob.symbolCount;s++){
	var page = genericHeader

		page+=`<h1>`
		page+=embedSvg(symbolName(s),"20mm","20mm")+"<br>\n"
		page+=db[s].name+"</h1>"

		page+='<table ><tr>'
		page+="<td>"
		page+=embedSvg(`spider_${symbolName(s)}`,"30mm","30mm","center-block")+"\n"

		var lines=db[s].lines;
		if (lines.length>0){
			page+="<ul>"
			for (var i=0;i<lines.length;i++){
				var L=lines[i]
				page+=`<li>${L}</li>\n`
			}		
			page+="</ul>"
		}
		page+="</td>"

		if (db[s].triple.length>0){
			page+=`<td>`
		
			var L = db[s].triple;
			page+=embedSvg(`triple_${symbolName(s)}`,"10mm","30mm","center-block")+"\n"
			page+=`<ul><li>${L}</li></ul>`
			page+=`</td>`

		}
		page+="</tr></table>"
		page+="<p>"
		page+="[ <a href='index.html'>back</a> ]"
		page+=genericFooter
		saveHTML(`./docs/${symbolName(s)}.html`,page);
}