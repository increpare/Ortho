#!/usr/bin/env node
var execSync = require('child_process').execSync

var fs = require('fs')
var glob = require('./js/app/orthoGlobals')
var lib = require('./js/orthoLib')
var svgRender = require("./js/svgRender")
var log = console.log
var Canvas = require('canvas')
var db = require('./res/docDatabase')
var css = require('css');
var Image = Canvas.Image
var Inliner = require('inliner');


var fast=false;
for (var i=2;i<process.argv.length;i++){
	var t = process.argv[i];
	if (t==="-fast"){
		fast=true;
	}
}

function findCssVar(cssDat,varName){
	for (var i=0;i<cssDat.stylesheet.rules.length;i++){
		var r = cssDat.stylesheet.rules[i];
		for (var j=0;j<r.declarations.length;j++){
			var d = r.declarations[j];
			if (d.type==='declaration' && d.property===varName){
				return d.value;
			}
		}
	}
	return null;
}

var cssPath = ("./docs/css/custom.css")
var cssFileStr=fs.readFileSync(cssPath,'utf8')
var cssDat = css.parse(cssFileStr,{},cssPath)
var fgCol = findCssVar(cssDat,"--fg")
var bgCol = findCssVar(cssDat,"--bg")
if (fgCol===null){
	fgCol="#000000"
}
if (bgCol===null){
	bgCol="#ffffff"
}
svgRender.setPadding(0.5)
svgRender.setColours(bgCol,fgCol,bgCol)

function saveHTML(filePath,htmlDat){
	fs.writeFileSync(filePath,htmlDat);
	new Inliner(filePath, function (error, htmlMinified) {
		fs.writeFileSync(filePath,htmlMinified);
		log("written "+filePath)
	})
}
function symbolName(i){
	var s = db[i];
	s = s.name.split(' ').join('_')
	return s
}

glob.drawGridLines=false;

//1 generate simple images

glob.sketchBook = [{
	elements:[[8,4,0]],
	lines:[],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]

function compressSVG(filePath){
	if (fast){
		return;
	}
	execSync(`svgo --multipass ${filePath}`)		
}

for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[0][2]=s;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/${symbolName(s)}.svg`;
	fs.writeFileSync(filePath, svgDat);
	compressSVG(filePath)
}

//1b generate triple images
glob.sketchBook = [{
	elements:[[7,4,35],[7,5,0],[7,6,36]],
	lines:[[7,6,7,4,0]],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]

for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[1][2]=s;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/triple_${symbolName(s)}.svg`
	fs.writeFileSync(filePath, svgDat);
	compressSVG(filePath)
}



for (var s=0;s<glob.symbolCount;s++){
		glob.sketchBook = [{
		elements:[[8,6,0],[7,5,35],[8,5,36],[9,5,37],[7,6,38],[9,6,39],[7,7,40],[8,7,41],[9,7,42]],
		lines:[[8,6,7,5,0],[8,6,8,5,0],[9,5,8,6,0],[7,6,8,6,0],[9,6,8,6,0],[7,7,8,6,0],[8,7,8,6,0],[9,7,8,6,0]],
		offsetX:0,
		offsetY:0,
		scale:1,
		sketchTitle:""
	}]
	glob.sketchBookIndex=0
	glob.page=glob.sketchBook[0]
	glob.page.elements[0][2]=s;


	//show/hide things as needed
	var dbs=db[s];
	var letters = ["A","B","C","D","E","F","G","H"];
	for (var i=letters.length-1;i>=0;i--){
		var L = letters[i]
		if (dbs.uses.indexOf(L)===-1){
			glob.page.elements.splice(i+1,1);
			glob.page.lines.splice(i,1);
		}
	}


	var svgDat = svgRender.render();
	var filePath = `./tmp/spider_${symbolName(s)}.svg`
	fs.writeFileSync(filePath, svgDat)
	compressSVG(filePath)
}

var genericHeader = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Orthona Documentation</title>

   
    <link href="css/custom.css" rel="stylesheet">

  </head>

  <body>`

var genericFooter = `</div>
  </body>
</html>`


function embedSvg(name,size,className){
	var svgStr=fs.readFileSync(`./tmp/${name}.svg`,'utf8')
	var startIdx = svgStr.indexOf("viewBox=");
	svgStr = svgStr.substr(startIdx);
	classStr="";
	if (className!=null){
		classStr+=`class ="${className}"`
	}
	svgStr=`<svg ${classStr} width="${size}" height=${size} `+svgStr;

	return svgStr;
}

var index = genericHeader;
index+='<div class="container">'
index+='<div class="page-header">'
index+='<div>'
index+='<h1>Orthona</h1>'
index+='</div>'
index+='</div>'
index+='<table class="span5 center-table" >'

for (var i=0;i<7;i++){
	index+="<tr>\n"
	for (var j=0;j<5;j++){
		var s = j+5*i;
		index+="<td>\n"
		index+=`<a   href='${symbolName(s)}.html'>\n`
		index+=embedSvg(symbolName(s),"50px");
		index+="</a></td>\n"
	}
	index+="</tr>\n"
}

index+="</table>"
index+="<p>"
index+="<div class='text-center'>"
index+="<a class='sitelink'   href='cheatsheat.html'>cheatsheat</a>"
index+="</div>"
index+=genericFooter

saveHTML("./docs/index.html",index);


//cheatsheet


var index = genericHeader;
index+='<h1>Orthona Cheatsheet</h1>'
index+='<table class="span5 center-table" >'

for (var i=0;i<7;i++){
	index+="<tr>\n"
	for (var j=0;j<5;j++){
		var s = j+5*i;
		index+="<td width=80px height=80px><div class='text-center'>\n"
		index+=`<a   href='${symbolName(s)}.html'>\n`
		index+=embedSvg(symbolName(s),"40px");
		index+=`<br>${db[i].name}</a>`
		index+="</div></td>\n"
	}
	index+="</tr>\n"
}

index+="</table>"
index+="<p>"
index+="<div class='text-center'>"
index+="<a class='sitelink'  class='sitelink' href='index.html'>home</a>"
index+="</div>"
index+=genericFooter


saveHTML("./docs/cheatsheat.html",index);


//generate individual pages

for (var s=0;s<glob.symbolCount;s++){
	var page = genericHeader

		page+='<div class="container">'
		page+='<div class="page-header">'
		page+='<div>'
		page+=`<h1 class="under">`
		page+=embedSvg(symbolName(s),"20mm")+"<br>\n"
		page+=db[s].name+"</h1>"
		page+='</div>'
		page+='</div>'

		page+="<div class='row'>"
		if (db[s].triple.length>0){
			page+=`<div class="col-xs-6">`
		}

		page+=embedSvg(`spider_${symbolName(s)}`,"250px","center-block spider")+"\n"

		var lines=db[s].lines;
		if (lines.length>0){
			page+="<ul>"
			for (var i=0;i<lines.length;i++){
				var L=lines[i]
				page+=`<li>${L}</li>\n`
			}		
			page+="</ul>"
		}

		if (db[s].triple.length>0){
			page+=`</div>`
		}

		if (db[s].triple.length>0){
			page+=`<div class="col-xs-6">`
		
			var L = db[s].triple;
			page+=`<img class="center-block triple"  src="svg/triple_${symbolName(s)}.svg">\n`
			page+=`<ul><li>${L}</li></ul>`
			page+=`</div>`

		}
		page+="</div>"
		page+="<p>"
		page+="<div class='text-center'>"
		page+="<a class='sitelink'  href='index.html'>back</a>"
		page+="</div>"
		page+="<div class='endpagediv'></div>"
		page+=genericFooter
		saveHTML(`./docs/${symbolName(s)}.html`,page);
}