#!/usr/bin/env node

var fs = require('fs');
eval(fs.readFileSync('orthoGlobals.js')+'');
eval(fs.readFileSync('orthoRender.js')+'');
eval(fs.readFileSync('orthoLib.js')+'');

if (process.argv.length===2){
	console.log("USAGE: drawOrtho [-noGridLines] [-diagonals] [-noIcons] [-noLines] FILENAME [OUTPUT]");
	return;
}

var inputFileName=""
var outputFileName=""
for (var i=2;i<process.argv.length;i++){
	var t = process.argv[i];
	if (t=="-noGridLines"){
		drawGridLines=false;
	} else if (t=="--diagonals"){
		drawGridLines_Diagonal=false;
	} else if (t=="-noIcons"){
		drawElements=false;
	} else if (t=="-noLines"){
		drawLines=false;
	} else if (inputFileName===""){
		inputFileName=t;
		console.log("input file "+t)
	} else if (outputFileName===""){
		outputFileName=t;
	} else {
		console.log("Too many arguments. Unexpected argument \""+t+"\".");		
	}
}
if (inputFileName=="")
{
	console.log("need to supply input name");
}

loadFile(inputFileName);


var canvasDimensions = canvasSize();

setOffsetToTopLeft();

var Canvas = require('canvas')
var Image = Canvas.Image

canvas = new Canvas(canvasDimensions[0], canvasDimensions[1])
ctx = canvas.getContext('2d');

ctx.font = '30px Impact';
ctx.fillText("Awesome!", 50, 100);

var te = ctx.measureText('Awesome!');
ctx.strokeStyle = 'rgba(0,0,0,0.5)';
ctx.beginPath();
ctx.lineTo(50, 102);
ctx.lineTo(50 + te.width, 102);
ctx.stroke();


drawIcon(0,cellSize,10);

orthoRender();

if (outputFileName===""){
	outputFileName = inputFileName.substring(0, inputFileName.indexOf('.json'))+'.png'
}

var dataURL = canvas.toDataURL();
var data = dataURL.replace(/^data:image\/\w+;base64,/, "");
var buf = new Buffer(data, 'base64');
fs.writeFile(outputFileName, buf);
console.log("generated "+ outputFileName);
