#!/usr/bin/env node
var execSync = require('child_process').execSync

var fs = require('fs')
var glob = require('./js/orthoGlobals')
var lib = require('./js/orthoLib')
var css = require('css')
var svgRender = require("./js/svgRender")
var log = console.log
var Canvas = require('canvas')
var minify = require('html-minifier').minify;
var Image = Canvas.Image
var Inliner = require('inliner');
var csvparse = require('csv-parse/lib/sync');


String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

//execSync("rm -rf ../orthodocs_Www/*")
execSync("mkdir -p ../orthodocs_www/sym")

var fast=false;
var inline=false;
for (var i=2;i<process.argv.length;i++){
	var t = process.argv[i];
	if (t==="-inline"){
		inline=true;
	} else {
		log("Don't undesratnd argument '"+t+"'.")
		return;
	}
}

function findCssVar(cssDat,varName){
	for (var i=0;i<cssDat.stylesheet.rules.length;i++){
		var r = cssDat.stylesheet.rules[i];
		for (var j=0;j<r.declarations.length;j++){
			var d = r.declarations[j];
			if (d.type==='declaration' && d.property===varName){
				return d.value;
			}
		}
	}
	return null;
}

fgCol="black"
bgCol="white"

svgRender.setPadding(0.5)
svgRender.setColours(bgCol,fgCol,bgCol)

function saveHTML(filePath,htmlDat,pageTitle){
	htmlDat=htmlDat.replaceAll("PAGETITLE",pageTitle)
	fs.writeFileSync(filePath,htmlDat);
	if(inline===false){
		return;
	}
	new Inliner(filePath, {},function (error, htmlMinified) {
		htmlMinified = minify(
			htmlMinified,
			{
				collapseBooleanAttributes:true,
				collapseInlineTagWhitespace:true,
				collapseWhitespace:true,
				decodeEntities:true,
				minifyCSS:true,
				minifyJS:true,
				processConditionalComments:true,
				removeAttributeQuotes:true,
				removeComments:true,
				removeEmptyAttributes:true,
				removeEmptyElements:true,
				removeOptionalTags:true,
				removeRedundantAttributes:true,
				removeScriptTypeAttributes:true,
				removeStyleLinkTypeAttributes:true,
				sortAttributes:true,
				sortClassName:true,
				trimCustomFragments:true,
				useShortDoctype:true
			})

		htmlMinified = htmlMinified.replaceAll("\\[<a","[ <a ")  
		htmlMinified = htmlMinified.replaceAll("a>]","a> ]")  
		fs.writeFileSync(filePath,htmlMinified);
	})
}



//1 load csv database
var datasheet_raw = fs.readFileSync("./res/datasheet/Sheet 1-Table 1.csv",'utf8');
var datasheet = csvparse(datasheet_raw)
var heading = datasheet[0]
var exampleNames=[]
for (var i=2;i<heading.length;i++){
	if (heading[i].trim()!=""){
		exampleNames.push(heading[i])
	}
}

function symbolName(i){
	var s = datasheet[i+1][1];
	s = s.split(' ').join('_');
	return s
}

glob.drawGridLines=true;

//2 generate simple images

glob.sketchBook = [{
	elements:[[8,4,0]],
	lines:[],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]

{
	glob.page.elements[0][2]=-2;
	
	var svgDat = (svgRender.render());
	var filePath = `./tmp/arrow.svg`;
	fs.writeFileSync(filePath, svgDat);
}

for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[0][2]=s;
	
	var svgDat = (svgRender.render());
	var filePath = `./tmp/${symbolName(s)}.svg`;
	fs.writeFileSync(filePath, svgDat);
}

var svgExDict={}
//1c generate example images

for (var fn of exampleNames){
	var jsonPath = `./dat/json/ex_${fn}.json`;
	var jsonDat = fs.readFileSync(jsonPath,'utf8');
	
	//first, replace symbols 0,1,2,3,4 with 
	for (var s=0;s<glob.symbolCount;s++){
		glob.page=JSON.parse(jsonDat);		
		for (var el of glob.page.elements){
			if (el[2]===0){
				el[2]=35;
			} else if (el[2]===1){
				el[2]=36;
			} else if (el[2]===2){
				el[2]=37;
			} else if (el[2]===3){
				el[2]=s;
			} else if (el[2]===4){
				el[2]=38;
			}
		}
		var svgDat = svgRender.render(s);
		svgExDict[`${fn}_${s}`]=svgDat;
	}

}



//INDEX

var index=`<!DOCTYPE html>
<html>
<head>
    <!-- Your app title -->
    <title>Orthodocs</title>
    <style>
    html,body{
    	width: 100%;
    	text-align:center;
    	background-color:white;
    	color:black;
    	padding-bottom:20px;
    }
    svg{
    	width:100px;
    }
    table{ 
    	margin: 0 auto;
	    border-collapse: collapse;
    	text-align:center;
    }
    td,tr,table{
    	border: 1px solid black;

    }
    </style>
</head>

<body class="">
                    <h1>Orthodocs</h1>`

index+="<p><table>"
for (var i=0;i<7;i++){
index+="<p><tr>"
	for (var j=0;j<5;j++){
		index+="<td>"
		var s = j+5*i;
		index+=`<a   href='sym/${symbolName(s).replaceAll(" ","_").toLowerCase()}.html'>\n`
		index+=embedSvg(symbolName(s),"100%",0)+"<br>"+symbolName(s).replaceAll('_',' ')+"</a>";
	}
}
index+="</table>"



function embedSvg(name,width=0,height=0,className){
	var svgStr=fs.readFileSync(`./tmp/${name}.svg`,'utf8')
	var startIdx = svgStr.indexOf("viewBox=");
	var classStr="";
	if (className!=null){
		classStr+=`class ="${className}"`
	}
	if (width!==0){
		svgStr = svgStr.substr(startIdx);
		if (height!==0){
			svgStr=`<svg ${classStr} width=${width} height=${height} `+svgStr;
		} else {
			svgStr=`<svg ${classStr} width=${width} `+svgStr;
		}
	} else if (height!==0){
		svgStr = svgStr.substr(startIdx);
		svgStr=`<svg ${classStr} height=${height} `+svgStr;
	} else {
		svgPart1 = svgStr.substr(0,startIdx);
		svgPart2 = svgStr.substr(startIdx);
		svgStr=svgPart1+" "+classStr+" "+svgPart2;
	}/*
	svgStr = svgStr.replaceAll(`stroke-linecap="round"`,"") 
	svgStr = svgStr.replaceAll(`stroke-width='1'`,"") 
	svgStr = svgStr.replaceAll(`stroke=${fgCol}`,"") 
	svgStr = svgStr.replaceAll(`fill=${bgCol}`,"") 
	svgStr = svgStr.replaceAll(`font-family="Helvetica"`,"") 
	svgStr = svgStr.replaceAll(`font-size="12px"`,"")  
	svgStr = svgStr.replaceAll(`text-anchor="middle"`,"")  
	svgStr = svgStr.replaceAll(`<path   fill='transparent'  d=''/>`,"")  
	svgStr = svgStr.replaceAll(`version='1.1'`,"")  */
	return (svgStr);
}

index+=`</body>

</html>`

saveHTML("../orthodocs_www/index.html",index,"orthodocs");


var genericHeader=`<!DOCTYPE html>
<html>
<head>
    <!-- Your app title -->
    <title>PAGETITLE</title>
    <style>
    body{
    	width: 100%;
    	text-align:center;
    	background-color:white;
    	color:black;
    	padding-top:20px;
    	padding-bottom:20px;
    }
    svg{
    	width:80px;
    }
    table{ 
    	margin: 0 auto;
	    border-collapse: collapse;
    	text-align:center;
    }
    table{
    	border:0;
    }
    td{
    	border: 1px solid black;

    }
    th{
    	border:0;
    }
    td{
    	padding-top:0;
    	margin-top:0;
    	width:200px;
    }
    .floatleft{
    	color:red;
    }
    div{
    	text-align:left;
    	width:800px;
    }
    th{
    	text-align:left;
    }
    </style>
</head>

<body class="">`

//generate individual pages
for (var i=1;i<datasheet.length;i++){
	var s=i-1;
	var r = datasheet[i];
	var page = genericHeader;
	page+=embedSvg(symbolName(s),"100px","100px")+"<br>";
	page+=`<h1>${r[1]}</h1>`
	r[2]=r[2].trim();
//	if (r[2].length>0){
//		page+=`<p>${r[2]}`
//	}
	
	page+=`<table><tr><th><a href="../index.html">&lt;&lt; back << </a><th><th>`
	var count=0;
	for (var j=2;j<r.length;j++){
		var ex_name = datasheet[0][j].trim();
		var ex_descr = r[j].trim();
		if (ex_descr!=""){
			if (count%4===0){
				page+=`<tr>\n`
			}
			count++;
			page+='<td>'
			var svgStr = svgExDict[ex_name+"_"+s]
			page+=(svgStr); 
			page+="<p>"
			page+=ex_descr;

		}
	}
	while(count>3&&count%4!==0){
		page += `<td> `;		
		count++;
	}
	page+="</table>"
	page += `</body>

</html>`;
	fs.writeFileSync(`../orthodocs_www/sym/${symbolName(s).replaceAll(" ","_").toLowerCase()}.html`,page);
}
