#!/usr/bin/env node
var execSync = require('child_process').execSync

var fs = require('fs')
var glob = require('./js/orthoGlobals')
var lib = require('./js/orthoLib')
var css = require('css')
var svgRender = require("./js/svgRender")
var log = console.log
var Canvas = require('canvas')
var minify = require('html-minifier').minify;
var Image = Canvas.Image
var Inliner = require('inliner');
var csvparse = require('csv-parse/lib/sync');



String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

//execSync("rm -rf ../orthology/www/*")
execSync("mkdir -p ../orthology/www/sym")

var fast=false;
var inline=false;
for (var i=2;i<process.argv.length;i++){
	var t = process.argv[i];
	if (t==="-inline"){
		inline=true;
	} else {
		log("Don't undesratnd argument '"+t+"'.")
		return;
	}
}

function findCssVar(cssDat,varName){
	for (var i=0;i<cssDat.stylesheet.rules.length;i++){
		var r = cssDat.stylesheet.rules[i];
		for (var j=0;j<r.declarations.length;j++){
			var d = r.declarations[j];
			if (d.type==='declaration' && d.property===varName){
				return d.value;
			}
		}
	}
	return null;
}

fgCol="black"
bgCol="white"

svgRender.setPadding(0.5)
svgRender.setColours(bgCol,fgCol,bgCol)

function saveHTML(filePath,htmlDat,pageTitle){
	htmlDat=htmlDat.replaceAll("PAGETITLE",pageTitle)
	fs.writeFileSync(filePath,htmlDat);
	if(inline===false){
		return;
	}
	new Inliner(filePath, {},function (error, htmlMinified) {
		htmlMinified = minify(
			htmlMinified,
			{
				collapseBooleanAttributes:true,
				collapseInlineTagWhitespace:true,
				collapseWhitespace:true,
				decodeEntities:true,
				minifyCSS:true,
				minifyJS:true,
				processConditionalComments:true,
				removeAttributeQuotes:true,
				removeComments:true,
				removeEmptyAttributes:true,
				removeEmptyElements:true,
				removeOptionalTags:true,
				removeRedundantAttributes:true,
				removeScriptTypeAttributes:true,
				removeStyleLinkTypeAttributes:true,
				sortAttributes:true,
				sortClassName:true,
				trimCustomFragments:true,
				useShortDoctype:true
			})

		htmlMinified = htmlMinified.replaceAll("\\[<a","[ <a ")  
		htmlMinified = htmlMinified.replaceAll("a>]","a> ]")  
		fs.writeFileSync(filePath,htmlMinified);
	})
}



//1 load csv database
var datasheet_raw = fs.readFileSync("./res/datasheet.csv",'utf8');
var datasheet = csvparse(datasheet_raw)
var heading = datasheet[0]
var exampleNames=[]
for (var i=2;i<heading.length;i++){
	if (heading[i].trim()!=""){
		exampleNames.push(heading[i])
	}
}

function symbolName(i){
	var s = datasheet[i+1][1];
	s = s.split(' ').join('_');
	return s
}

glob.drawGridLines=false;

//2 generate simple images

glob.sketchBook = [{
	elements:[[8,4,0]],
	lines:[],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]

{
	glob.page.elements[0][2]=-2;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/arrow.svg`;
	fs.writeFileSync(filePath, svgDat);
}

for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[0][2]=s;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/${symbolName(s)}.svg`;
	fs.writeFileSync(filePath, svgDat);
}

var svgExDict={}
//1c generate example images

for (var fn of exampleNames){
	var jsonPath = `./dat/json/ex_${fn}.json`;
	var jsonDat = fs.readFileSync(jsonPath,'utf8');
	
	//first, replace symbols 0,1,2,3,4 with 
	for (var s=0;s<glob.symbolCount;s++){
		glob.page=JSON.parse(jsonDat);		
		for (var el of glob.page.elements){
			if (el[2]===0){
				el[2]=35;
			} else if (el[2]===1){
				el[2]=36;
			} else if (el[2]===2){
				el[2]=37;
			} else if (el[2]===3){
				el[2]=s;
			} else if (el[2]===4){
				el[2]=38;
			}
		}
		var svgDat = svgRender.render(s);
		svgExDict[`${fn}_${s}`]=svgDat;
	}

}



//INDEX

var index=`<!DOCTYPE html>
<html>
<head>
    <!--
        Customize this policy to fit your own app's needs. For more guidance, see:
            https://github.com/apache/cordova-plugin-whitelist/blob/master/README.md#content-security-policy
        Some notes:
            * gap: is required only on iOS (when using UIWebView) and is needed for JS->native communication
            * https://ssl.gstatic.com is required only on Android and is needed for TalkBack to function properly
            * Disables use of inline scripts in order to mitigate risk of XSS vulnerabilities. To change this:
                * Enable inline JS: add 'unsafe-inline' to default-src
        -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *">

    <!-- Required meta tags-->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="format-detection" content="telephone=no">
    <meta name="msapplication-tap-highlight" content="no">

    <!-- Your app title -->
    <title>Orthology</title>

    <!-- This template defaults to the iOS CSS theme. To support both iOS and material design themes, see the Framework7 Tutorial at the link below:
        http://www.idangero.us/framework7/tutorials/maintain-both-ios-and-material-themes-in-single-app.html
     -->

    <link rel="stylesheet" href="lib/framework7/css/framework7.ios.min.css">
    <link rel="stylesheet" href="lib/framework7/css/framework7.ios.colors.min.css">

    <link rel="stylesheet" href="css/styles.css">
</head>

<body class="">
    <!-- Status bar overlay for full screen mode (PhoneGap) -->
    <div class="statusbar-overlay"></div>

    <!-- Panels overlay-->
    <div class="panel-overlay"></div>

    <!-- Views -->
    <div class="views">
        <!-- Your main view, should have "view-main" class -->
        <div class="view view-main">
            <!-- Top Navbar-->
            <div class="navbar">
                <div class="navbar-inner">
                    <!-- We need cool sliding animation on title element, so we have additional "sliding" class -->
                    <div class="center sliding">Orthology</div>
                    <div class="right">
                        <!--
                          Right link contains only icon - additional "icon-only" class
                          Additional "open-panel" class tells app to open panel when we click on this link
                        -->
                    </div>
                </div>
            </div>
            <!-- Pages container, because we use fixed-through navbar and toolbar, it has additional appropriate classes-->
            <div class="pages navbar-through toolbar-through">
                <!-- Page, "data-page" contains page name -->
                <div data-page="index" class="page">
                    <!-- Scrollable page content -->
                    <div class="page-content bigcontent">
                        <div class="content-block unpadded">`

for (var i=0;i<7;i++){
	index+=`<div class="row">\n`
	for (var j=0;j<5;j++){
		var s = j+5*i;
		index+=`<div class="col-20">\n`
		index+=`<a   href='sym/${symbolName(s)}.html'>\n`
		index+=embedSvg(symbolName(s),"100%",0)+symbolName(s).replaceAll('_',' ')+"</a>";
		index+='</div>\n'
	}
	index+=`</div>\n`
}




function embedSvg(name,width=0,height=0,className){
	var svgStr=fs.readFileSync(`./tmp/${name}.svg`,'utf8')
	var startIdx = svgStr.indexOf("viewBox=");
	var classStr="";
	if (className!=null){
		classStr+=`class ="${className}"`
	}
	if (width!==0){
		svgStr = svgStr.substr(startIdx);
		if (height!==0){
			svgStr=`<svg ${classStr} width=${width} height=${height} `+svgStr;
		} else {
			svgStr=`<svg ${classStr} width=${width} `+svgStr;
		}
	} else if (height!==0){
		svgStr = svgStr.substr(startIdx);
		svgStr=`<svg ${classStr} height=${height} `+svgStr;
	} else {
		svgPart1 = svgStr.substr(0,startIdx);
		svgPart2 = svgStr.substr(startIdx);
		svgStr=svgPart1+" "+classStr+" "+svgPart2;
	}/*
	svgStr = svgStr.replaceAll(`stroke-linecap="round"`,"") 
	svgStr = svgStr.replaceAll(`stroke-width='1'`,"") 
	svgStr = svgStr.replaceAll(`stroke=${fgCol}`,"") 
	svgStr = svgStr.replaceAll(`fill=${bgCol}`,"") 
	svgStr = svgStr.replaceAll(`font-family="Helvetica"`,"") 
	svgStr = svgStr.replaceAll(`font-size="12px"`,"")  
	svgStr = svgStr.replaceAll(`text-anchor="middle"`,"")  
	svgStr = svgStr.replaceAll(`<path   fill='transparent'  d=''/>`,"")  
	svgStr = svgStr.replaceAll(`version='1.1'`,"")  */
	return svgStr;
}

index+=`
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" src="cordova.js"></script>
    <script type="text/javascript" src="lib/framework7/js/framework7.min.js"></script>
    <script type="text/javascript" src="js/my-app.js"></script>
</body>

</html>`

saveHTML("../orthology/www/index.html",index,"Orthology");


var genericHeader=`<!-- We don't need a full layout in this file because this page will be parsed with Ajax. -->

<!-- Top Navbar-->
<div class="navbar">
    <div class="navbar-inner">
        <div class="left">
            <a href="#" class="back link">
                <i class="icon icon-back"></i>
                <span>Back</span>
            </a>
        </div>
        <div class="center sliding">PAGETITLE</div>
    </div>
</div>
<div class="pages">
    <div data-page="about" class="page">
        <div class="page-content">
            <div class="content-block">`

//generate individual pages
for (var i=1;i<datasheet.length;i++){
	var s=i-1;
	var r = datasheet[i];
	var page = genericHeader.replaceAll("PAGETITLE",`${embedSvg(symbolName(s))} ${r[1]} ${embedSvg(symbolName(s))}`);
	r[2]=r[2].trim();
	if (r[2].length>0){
		page+=`<p>${r[2]}`
	}
	
	var count=0;
	for (var j=2;j<r.length;j++){
		var ex_name = datasheet[0][j].trim();
		var ex_descr = r[j].trim();
		if (ex_descr!=""){
			if (count%2===0){
				if (count>0){
					page+=`</div>`
				}
				page+=`<div class="row">\n`
			}
			count++;

			var svgStr = svgExDict[ex_name+"_"+s]
			page+=`<div class="col-50">\n`
			page+=`<div class="card">`
			page+=`    <div class="card-content">`
			page+=`        <div class="card-content-inner">${svgStr}</div>`
			page+=`    </div>`
			page+=`    <div class="card-footer">${ex_descr}</div>`
			page+=`</div> `
			page+=`</div> `

		}
	}
	while(count<2){
		page += `<div class="col-33"></div>`;		
		count++;
	}
	page += `</div>
            </div>
        </div>
    </div>
</div>`;
	fs.writeFileSync(`../orthology/www/sym/${symbolName(s)}.html`,page);
}
