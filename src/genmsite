#!/usr/bin/env node
var execSync = require('child_process').execSync

var fs = require('fs')
var glob = require('./js/orthoGlobals')
var lib = require('./js/orthoLib')
var svgRender = require("./js/svgRender")
var log = console.log
var Canvas = require('canvas')
var slab = require("slab-markup")
var css = require('css');
var minify = require('html-minifier').minify;
var Image = Canvas.Image
var Inliner = require('inliner');
var csvparse = require('csv-parse/lib/sync');


var db = slab.parseFileSync('./res/docDatabase.slab');

execSync("rm -rf ../orthology/www/*")
execSync("mkdir -p ../orthology/www/sym")

var fast=false;
var inline=false;
for (var i=2;i<process.argv.length;i++){
	var t = process.argv[i];
	if (t==="-inline"){
		inline=true;
	} else {
		log("Don't undesratnd argument '"+t+"'.")
		return;
	}
}

function findCssVar(cssDat,varName){
	for (var i=0;i<cssDat.stylesheet.rules.length;i++){
		var r = cssDat.stylesheet.rules[i];
		for (var j=0;j<r.declarations.length;j++){
			var d = r.declarations[j];
			if (d.type==='declaration' && d.property===varName){
				return d.value;
			}
		}
	}
	return null;
}

var cssPath = ("./res/custommobdocs.css")
var cssFileStr=fs.readFileSync(cssPath,'utf8')
var cssDat = css.parse(cssFileStr,{},cssPath)
var fgCol = findCssVar(cssDat,"--fg")
var bgCol = findCssVar(cssDat,"--bg")
if (fgCol===null){
	fgCol="#000000"
}
if (bgCol===null){
	bgCol="#ffffff"
}
svgRender.setPadding(0.5)
svgRender.setColours(bgCol,fgCol,bgCol)

function saveHTML(filePath,htmlDat,pageTitle){
	htmlDat=htmlDat.replaceAll("PAGETITLE",pageTitle)
	fs.writeFileSync(filePath,htmlDat);
	if(inline===false){
		return;
	}
	new Inliner(filePath, {},function (error, htmlMinified) {
		htmlMinified = minify(
			htmlMinified,
			{
				collapseBooleanAttributes:true,
				collapseInlineTagWhitespace:true,
				collapseWhitespace:true,
				decodeEntities:true,
				minifyCSS:true,
				minifyJS:true,
				processConditionalComments:true,
				removeAttributeQuotes:true,
				removeComments:true,
				removeEmptyAttributes:true,
				removeEmptyElements:true,
				removeOptionalTags:true,
				removeRedundantAttributes:true,
				removeScriptTypeAttributes:true,
				removeStyleLinkTypeAttributes:true,
				sortAttributes:true,
				sortClassName:true,
				trimCustomFragments:true,
				useShortDoctype:true
			})

		htmlMinified = htmlMinified.replaceAll("\\[<a","[ <a ")  
		htmlMinified = htmlMinified.replaceAll("a>]","a> ]")  
		fs.writeFileSync(filePath,htmlMinified);
	})
}
function symbolName(i){
	var s = db[i];
	s = s.name.split(' ').join('_').toLowerCase();
	return s
}

glob.drawGridLines=false;

//1 generate simple images

glob.sketchBook = [{
	elements:[[8,4,0]],
	lines:[],
	offsetX:0,
	offsetY:0,
	scale:1,
	sketchTitle:""
}]
glob.sketchBookIndex=0
glob.page=glob.sketchBook[0]

{
	glob.page.elements[0][2]=-2;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/arrow.svg`;
	fs.writeFileSync(filePath, svgDat);
}

for (var s=0;s<glob.symbolCount;s++){
	glob.page.elements[0][2]=s;
	
	var svgDat = svgRender.render();
	var filePath = `./tmp/${symbolName(s)}.svg`;
	fs.writeFileSync(filePath, svgDat);
}

//1 load csv database
var datasheet_raw = fs.readFileSync("./res/datasheet.csv",'utf8');
var datasheet = csvparse(datasheet_raw)
var heading = datasheet[0]
var exampleNames=[]
for (var i=3;i<heading.length;i++){
	if (heading[i].trim()!=""){
		exampleNames.push(heading[i])
	}
}

var svgExDict={}
//1c generate example images

for (var fn of exampleNames){
	var jsonPath = `./dat/json/ex_${fn}.json`;
	var jsonDat = fs.readFileSync(jsonPath,'utf8');
	
	//first, replace symbols 0,1,2,3,4 with 
	for (var s=0;s<glob.symbolCount;s++){
		glob.page=JSON.parse(jsonDat);		
		for (var el of glob.page.elements){
			if (el[2]===0){
				el[2]=35;
			} else if (el[2]===1){
				el[2]=36;
			} else if (el[2]===2){
				el[2]=37;
			} else if (el[2]===3){
				el[2]=s;
			} else if (el[2]===4){
				el[2]=38;
			}
		}
		log(glob.page.elements)
		var svgDat = svgRender.render();
		svgExDict[`${s}_${fn}`]=svgDat;
	}

}



//INDEX


var index = genericHeader;
index+='<table class="cheat" >'

for (var i=0;i<7;i++){
	index+="<tr>"
	for (var j=0;j<5;j++){
		var s = j+5*i;
		index+="<td>"
		if (i===0){
			index+="<br>"
		}
		index+=`<a   href='sym/${symbolName(s)}.html'>`
		index+=embedSvg(symbolName(s),"100%",null)+"";
		//index+=`<br>${db[s].name}</a>`
	}
}

index+="</table>"

saveHTML("../orthology/www/index.html",index,"Orthology");


genericHeader ="<html><body>"
genericFooter ="</body></html>"

//generate individual pages

for (var s=0;s<glob.symbolCount;s++){
	var page = genericHeader;

	page += genericFooter;
	fs.writeFileSync(`../orthology/www/sym/${symbolName(s)}`);
}
